•	https://leetcode.com/problems/majority-element

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n= nums.size()/2;
        return nums[n];
    }
};

•	https://leetcode.com/problems/non-overlapping-intervals
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        
         sort(intervals.begin(),intervals.end());
       
          int start=intervals[0][0];
          int end=intervals[0][1];
         int count=0;
        for(int i=1;i<intervals.size();i++)
        {
            
            if(end>intervals[i][0])
            {
                count++;
                end=min(end, intervals[i][1]);
            }
            else
                end=intervals[i][1];
                
        }
        
        return count;
    }
};
•	https://leetcode.com/problems/kth-largest-element-in-an-array
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if(k>nums.size()) {
            return -1;
        } else {
            int left = 0;
            int right =nums.size()-1;
            return (nums, k, left, right);
        }
    }
    
    int partition(vector<int>& nums, int left, int right) {
        int pivot = nums[right];
        int i = left;
        for(int j=left; j<=right-1; j++) {
            if(nums[j] > pivot) {
                swap(nums[i], nums[j]);
                i++;
            }
        }
        
        swap(nums[i], nums[right]);
        return i;
    }
    int quickSelect(vector<int>& nums, int k, int left, int right) {
        int idx = partition(nums, left, right);
        if(idx == k-1) return nums[k-1];
        else if(idx < k-1) {
            return quickSelect(nums, k, idx+1, right);
        } else {
            return quickSelect(nums, k, left, idx-1);
        }
   }
};
•	https://leetcode.com/problems/sort-an-array
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
     sort(nums.begin(),nums.end());   
        return nums;
    }
};
•	https://leetcode.com/problems/hand-of-straights
class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int groupSize) {
         sort(hand.begin(), hand.end());
        unordered_map<int, int> rem;
        for(auto x: hand) rem[x]++;
        for(auto x: hand) {
            if(rem[x] == 0) continue ;
            for(int i=0;i<groupSize;i++) {
                if(rem[x+i] == 0) return false;
                else rem[x+i]--;
            }
        }
        return true;
    }
};
•	https://leetcode.com/problems/string-without-aaa-or-bbb
class Solution {
public:
    string strWithout3a3b(int a, int b) {
        int A = 0, B = 0, n = a + b;
        string res;
        for (int i = 0; i < n; i++)
        {
            if (B == 2 || (A < 2 && a >= b))
                A++, B=0, a--, res.push_back('a');
            else
                A=0, B++, b--, res.push_back('b');
        }
        return res;
    }
};
