ANANYA SINGH 2nd MILESTONE (CP BASICS)

1)  https://leetcode.com/problems/search-in-rotated-sorted-array

class Solution {
       public int search(int[] A, int target) {
    if (A.length == 0) return -1;
    int L = 0, R = A.length-1;

    if (target < A[L] && target > A[R]) return -1;
    while (L < R) {
        int M = (L + R)/2;
        if (A[M] <= A[R]) {
            if (target > A[M] && target <= A[R]) {
                L = M+1;
            } else {
                R = M;
            }
            
        } else {
            if (target <= A[M] && target >= A[L]) {
                    R = M;
            } else {
                L = M+1;
            }
        }
    }
    if (A[L] == target) return L;
    else return -1;
} 

}




2) https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array

public class Solution {
public int[] searchRange(int[] nums, int target) {
    int[] result = new int[2];
    result[0] = findFirst(nums, target);
    result[1] = findLast(nums, target);
    return result;
}

private int findFirst(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(nums[mid] >= target){
            end = mid - 1;
        }else{
            start = mid + 1;
        }
        if(nums[mid] == target) idx = mid;
    }
    return idx;
}

private int findLast(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(nums[mid] <= target){
            start = mid + 1;
        }else{
            end = mid - 1;
        }
        if(nums[mid] == target) idx = mid;
    }
    return idx;
}
}
 



3) https://leetcode.com/problems/find-the-duplicate-number

class Solution {
   
    public int findDuplicate(int[] nums) {
    
        int val = 0;
        
        for(int i = 0; i < nums.length; i++) {
            val = Math.abs(nums[i]);
            val--;
            if(nums[val] < 0) {
                return  Math.abs(nums[i]);
            } else {
                nums[val] = -nums[val];
            }
            
        }
        return -1;
    }
}
 



4) https://leetcode.com/problems/squares-of-a-sorted-array

class Solution {
    public int[] sortedSquares(int[] nums) {
        int res[] = new int[nums.length];
        int i = 0;
        int k = nums.length - 1;
        int z = nums.length - 1;
        while(z >= 0){ 
            res[z--] = Math.abs(nums[i]) > Math.abs(nums[k]) ? nums[i] * nums[i++] : nums[k] * nums[k--];
        }
        return res;
    }
}
 



5) https://leetcode.com/problems/maximum-ice-cream-bars

class Solution {
    public int maxIceCream(int[] costs, int coins) {
        Arrays.sort(costs);
        if(costs[0]>coins)
            return 0;
        int sum=0;
        int count=0;
        for(int i=0;i<costs.length;i++)
        {
                sum=sum+costs[i];
                count++;
            if(sum==coins)
                return count;
            if(sum>coins)
                return count-1;
                
        }
        return count;
    }
}




6) https://leetcode.com/problems/longest-substring-without-repeating-characters

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() <= 1) return s.length();
        
        int max = 1;
        int ptr = 0;
        for (int i = 1; i< s.length(); i++) {
            // find the first occurence of the char after index ptr
            int index = s.indexOf(s.charAt(i), ptr); 
            if (index < i) { // it means that it is contained in s.substring(ptr, i)
                ptr = index + 1;
            }
            max = Math.max(max, i - ptr + 1);
        }
        
        return max;
    }
}
 



7) https://leetcode.com/problems/longest-consecutive-sequence

public class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int max = 0;
        while (!set.isEmpty()) {
            int base = set.iterator().next();
            set.remove(base);
            int left = base;
            int right = base;
            while (set.remove(--left));
            while (set.remove(++right));
            max = Math.max(max, right - left - 1);
        }
        return max;
    }
}
 



8) https://leetcode.com/problems/majority-element

public class Solution {
    public int majorityElement(int[] nums) {
        int res = nums[0];
        int count = 1;
    
        for (int num : nums) {
            if (res == num) ++count;
            else --count;
        
            if (count == 0) {
                res = num;
                count = 1;
            }
        }
    
        return res;
    }
}
