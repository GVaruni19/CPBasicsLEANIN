MILESTONE-2
Q1. https://leetcode.com/problems/search-in-rotated-sorted-array
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target)
            return mid;
            else if(nums[low]<=nums[mid]){
                if(target>=nums[low]&&target<=nums[mid])
                    high=mid-1;
                else
                    low=mid+1;
            }
            else{
                if(target>=nums[mid]&&target<=nums[high])
                    low=mid+1;
                else
                    high=mid-1;
            }
        }
        return -1;
    }
}
Q2. https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array
class Solution {
    public int[] searchRange(int[] nums, int target) {
         int low=0;
        int high=nums.length-1;
        int start=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
            else{
                start=mid;
                high=mid-1;
            }
        }
        int end=-1;
        low=0;
        high=nums.length-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]>target)
                high=mid-1;
            else if(nums[mid]<target)
                low=mid+1;
            else{
                end=mid;
                low=mid+1;
            }
        }
        return new int[]{start,end};
    }
}
Q3. https://leetcode.com/problems/find-the-duplicate-number
class Solution {
    public int findDuplicate(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            int temp = Math.abs(nums[i]);
            if (nums[temp]<0) {
                return temp;
            }
            nums[temp]*=-1;
        }
        return -1;
    }
}
Q4. https://leetcode.com/problems/squares-of-a-sorted-array
class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        int index=n-1;
        int low =0, high=n-1;
        while(index>=0) {
            int ls=nums[low] * nums[low];
            int hs =nums[high] * nums[high];
            ans[index]=Math.max(ls, hs);
            if(ls>hs) low++;
            else high--;
            index--;
        }        
        return ans;        
    }    
}
Q5. https://leetcode.com/problems/maximum-ice-cream-bars
class Solution {
    public int maxIceCream(int[] costs, int coins) {
        Arrays.sort(costs);
        int count = 0;
        for(int i=0; i<costs.length; i++){
            if(costs[i] > coins)
                return count;
            coins -= costs[i]   
            if(coins >= 0)
                count++;
        }
        return count;
    }
}
Q6. https://leetcode.com/problems/longest-substring-without-repeating-characters
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int i=0,j=0;
        int max = 0;
        String curr = s.substring(0,0);
        while (i<s.length() && j<s.length()) {
            int index = curr.indexOf(s.charAt(j))+i;
            if (index != -1)
                i=index+1;
            j++;
            curr = s.substring(i,j);
            if (curr.length() > max)
                max = curr.length();
        }
        return max;
    }
}
Q7. https://leetcode.com/problems/longest-consecutive-sequence
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new TreeSet<>();
        for(int a:nums)
            set.add(a);
        List<Integer> list = new ArrayList<>(set);
        int i = 0;
        int j = 0;
        int maxLength = 0;
        while(j<list.size()){
            while(j<list.size()-1&&list.get(j)+1==list.get(j+1))
                j++;
            maxLength = Math.max(maxLength,j-i+1);
            j++;
            i=j;
        } 
        return maxLength;
    }
}
Q8. https://leetcode.com/problems/majority-element
class Solution {
    public int majorityElement(int[] nums) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        Arrays.sort(nums);
        int n = nums.length;
        
        for(int i=0; i< n; i++){
            int val = nums[i];
            if(map.containsKey(val)){
                map.put(val, map.get(val)+1);
                
                if(map.get(val) > n/2){
                    return val;
                }
            }else
                map.put(val, 1);
        }
        return nums[0];
        
    }
}
