MILESTONE:2
https://leetcode.com/problems/search-in-rotated-sorted-array
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0;
        int h=nums.size()-1;
        int m;
        while(l<=h)
        {
            m=l+(h-l)/2;
            if(nums[m]==target)
            {
                return m;
            }
            else if(nums[l]<=nums[m])
            {
                if(target>=nums[l] && target<=nums[m])
                {
                    h=m-1;
                }
                else
                    l=m+1;
            }
            else
            {
                if(target>=nums[m]&& target<=nums[h])
                {
                    l=m+1;
                }
                else
                {
                    h=m-1;
                }
            }
        }
        return -1;
    }
};

https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first=-1;
        int start=0;
        int end=nums.size()-1;
        int mid;
        vector<int> vec;
        while(start<=end)
        {
            mid=start+(end-start)/2;
            if(target==nums[mid])
            {
                first=mid;
                end=mid-1;
            }
            else if(target>nums[mid])
                start=mid+1;
            else
                end=mid-1;
        }
        vec.push_back(first);
        int last =-1;
        start=0;
        end=nums.size()-1;
        while(start<=end)
        {
            mid=start+(end-start)/2;
            if(target==nums[mid])
            {
                last=mid;
                start=mid+1;
            }
            else if(target>nums[mid])
                start=mid+1;
            else
                end=mid-1;
        }
        vec.push_back(last);
        return vec;
    }
};
https://leetcode.com/problems/find-the-duplicate-number
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        vector<int>Hash(n,0);
        for(int i=0;i<nums.size();i++)
        {
            Hash[nums[i]]++;
        }
        for(int i=0;i<Hash.size();i++)
        {
            if(Hash[i]>1)
            {
                return i;
            }
        }
        return 0;
    }
};
https://leetcode.com/problems/squares-of-a-sorted-array
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int>v1;
        for(int i=0;i<nums.size();i++)
        {
            v1.push_back(nums[i]*nums[i]);
        }
        sort(v1.begin(),v1.end());
        return v1;
    }
};
https://leetcode.com/problems/maximum-ice-cream-bars
class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        sort(costs.begin(), costs.end());
        
        int n = costs.size();
        
        if(n<=1) {
            if(costs[0]<coins) {
                return 1;
            }
            else {
                return 0;
            }
        }
        
        int i=0;
        
        while(costs[i]<=coins and i<n) {
            coins = coins - costs[i];
            i++;
        }
        
        return i;
    }
};
https://leetcode.com/problems/longest-substring-without-repeating-characters
int lengthOfLongestSubstring(string s) {
        vector<int> dict(256, -1);
        int maxLen = 0, start = -1;
        for (int i = 0; i != s.length(); i++) {
            if (dict[s[i]] > start)
                start = dict[s[i]];
            dict[s[i]] = i;
            maxLen = max(maxLen, i - start);
        }
        return maxLen;
    }
    https://leetcode.com/problems/longest-consecutive-sequence
    class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int>HashSet;
        for(int i=0;i<nums.size();i++)
        {
            HashSet.insert(nums[i]);
        }
        int ans=0;
        int curr=0;
        int len=0;
        for(int i=0;i<nums.size();i++)
        {
            if(!HashSet.count(nums[i]-1))
            {
                curr=nums[i];
                len=1;
                while(HashSet.count(curr+1))
                {
                    len++;
                    curr+=1;
                }
                ans=max(ans,len);
            }
        }
        return ans;

    }
};
https://leetcode.com/problems/majority-element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int counter = 0, majority;
        for (int num : nums) {
            if (!counter) {
                majority = num;
            }
            counter += num == majority ? 1 : -1;
        }
        return majority;
    }
};
