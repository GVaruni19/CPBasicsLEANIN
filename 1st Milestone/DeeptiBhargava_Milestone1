1.	https://leetcode.com/problems/jewels-and-stones/
sol-   class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        int i,j,c=0;
        int n=stones.length(); int m=jewels.length();
        for(i=0;i<m;i++)
        {
           for(j=0;j<n;j++)
           {
                if(jewels[i]==stones[j])
                    c++;   
           }
         }
          return c;
    }
  };

2.	https://leetcode.com/problems/merge-strings-alternately/
sol- class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string merged="";
        string str="";
        int n=word1.length();
        int m=word2.length();
        int i=0,j=0;
        while((i<n) && (j<m))
        {
            merged+=word1[i];
            merged+=word2[j];
            ++i;
            ++j;
        }
        if(n>m)
        {
            str=word1.substr(i,(n-i));
            return merged.append(str);
            exit(0);
        } 
        else if(m>n)
        {
            str=word2.substr(j,(m-j));
            return merged.append(str);   
            exit(0);
        }
        else
            return merged;
    }
};
3.	https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/
sol-  class Solution
{
public:
    int minSteps(string s, string t)
    {
        int arr1[26] = {0};
        int arr2[26] = {0};
        int n = s.size();
        for (int i = 0; i < n; ++i)
        {
            ++arr1[s[i] - 'a'];
            ++arr2[t[i] - 'a'];
        }
        int ans = 0;
        for (int i = 0; i < 26; ++i)
        {
            if (arr1[i] > arr2[i])
                ans += (arr1[i] - arr2[i]);
        }
        return ans;
    }
};
4.	https://leetcode.com/problems/spiral-matrix/
sol- class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int i=0;
        int n=matrix.size();
        int m=matrix[i].size();
        
        int l_r=0;   //left to right
        int u_d=m-1;  //up to down
        int r_l=n-1;   //right to left
        int d_u=0;     // down to up
        
        vector<int>res(n*m);
        int ind=0;
        
        while((l_r<=r_l)&&(d_u<=u_d))
        {
            for(int c=d_u;c<=u_d;++c)
            {
                res[ind++]=matrix[l_r][c];
            }
            if(++l_r>r_l)
                break;
            
            for(int r=l_r;r<=r_l;++r)
            {
                res[ind++]=matrix[r][u_d];
            }
            if(--u_d<d_u)
                break;
            
            for(int c=u_d; c>=d_u; --c)
            {
                res[ind++]=matrix[r_l][c];
            }
            if(--r_l<l_r)
                break;
            
            for(int r=r_l; r>=l_r; --r)
            {
                res[ind++]=matrix[r][d_u];
            }
            if(++d_u > u_d)
                break;
        }
        return res;        
    }
};

5.	https://leetcode.com/problems/sort-array-by-parity/
sol- class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int temp;
        for(int i=0;i<(nums.size()/2);i++)
        {
            for(int j=(nums.size()-1);j>=(nums.size()/2);j--)
            {
                if((nums[i]%2!=0)||(nums[j]%2==0))
                {
                   temp=nums[i] ;
                   nums[i]=nums[j];
                   nums[j]=temp; 
                }
            }
        }
        return nums;
    }
};

6.	https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
sol- class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min,max,i,j,profit;
        min=prices[0];
        profit=0;
        for(i=0;i=prices.size();i++)
        {
            if(min>prices[i])
            {
                min=prices[i];
                j=i;
            }
        }
        while(j<prices.size())
        {
            if(max<prices[j])
            {
                max=prices[j];
            }
            j++;
        }
        profit=max-min;
        return profit;
    }
};
7.	https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii
sol- class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit=0;
        for(int i=1;i<prices.size();i++)
        {
            profit+=max(0,prices[i]-prices[i-1]);
        }
        return profit;
    }
};
