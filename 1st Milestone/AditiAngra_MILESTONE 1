✔*QUESTION 1*: https://leetcode.com/problems/jewels-and-stones/
SOLUTION:
     METHOD 1:-Using hash table
     class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
       vector<int>hash(256,0);
        int ans=0;
        for(int i=0;i<jewels.size();i++)
        {
            hash[jewels[i]]++;
        }
        for(int i=0;i<stones.size();i++)
        {
            if(hash[stones[i]]>0)
            {
                ans+=hash[stones[i]];
            }
        }
        return ans;
        
        
    }
};
METHOD 2:- Using map
class Solution {
public:
    int numJewelsInStones(string jewels, string stones) {
        map<int,char>m1;
        for(char c:stones)
        {
            m1[c]++;
        }
        int count=0;
        for(char it:jewels)
        {
            if(m1.count(it))
            {
                count+=m1[it];
            }
        }
        return count;
    }
};





✔QUESTION 2:-https://leetcode.com/problems/merge-strings-alternately/
SOLUTION : Two Pointer Approach
class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string s="";
        int i=0;
        int j=0;
     while(i<word1.size() && j<word2.size())
     {
         s+=word1[i];
         i++;
         s+=word2[j];
         j++;
         
     }
        while(i<word1.size())
        {
            s+=word1[i];
            i++;
        }
        while(j<word2.size())
        {
            s+=word2[j];
            j++;
        }
        return s;
    }
};





✔QUESTION 3:https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/
sOLUTION: Using Hash Map
class Solution {
public:
    int minSteps(string s, string t) {
        int Frequency[26]={0};
        int count=0;
        for(int i=0;i<t.size();i++)
        {
            Frequency[s[i]-'a']++;
            Frequency[t[i]-'a']--;
        }
        for(int i=0;i<26;i++)
        {
            if(Frequency[i]>0)
            {
                count+=Frequency[i];
            }
        }
        return count;
    }
};




✔QUESTION 4:https://leetcode.com/problems/spiral-matrix/
SOLUTION:
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
          int top = 0;
        vector<int>spiral;
        int bottom = matrix.size() - 1;
        int left = 0;
        int right = matrix[0].size() - 1;
		
		//initializing direction
        int direction = 0; 

        while(top <= bottom && left <= right){
			
			
            if(direction == 0){
				//left -> right
                for(int i = left; i <= right; i++){
                    spiral.push_back(matrix[top][i]);
                }
                top++;
            }
            else if(direction == 1){
				//top -> bottom
                for(int i = top; i <= bottom; i++){
                    spiral.push_back(matrix[i][right]);
                }
                right--;
            }
            else if(direction == 2){
				//right -> left
                for(int i = right; i >= left; i--){
                    spiral.push_back(matrix[bottom][i]);
                }
                bottom--;
            }
            else if(direction == 3){
				//bottom -> top
                for(int i = bottom; i >= top; i--){
                    spiral.push_back(matrix[i][left]);
                }
                left++;
            }
			
			//increment the value of direction
            direction = (direction + 1) % 4;


        }

        return spiral;
    }
};






✔QUESTION 5:https://leetcode.com/problems/sort-array-by-parity/
SOLUTION:
class Solution {
public:
     vector<int> sortArrayByParity(vector<int> &A) {
        for (int i = 0, j = 0; j < A.size(); j++)
            if (A[j] % 2 == 0) swap(A[i++], A[j]);
        return A;
    }
};






✔Question 6:https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
Solution:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minStock=INT_MAX;
        int maxProfit=0;
        for(int i=0;i<prices.size();i++)
        {
            minStock=min(minStock,prices[i]);
            maxProfit=max(maxProfit,prices[i]-minStock);
        }
        return maxProfit;
    }
};





✔QUESTION 7:https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
Solution:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit=0;
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i-1]<prices[i])
            {
                profit+=prices[i]-prices[i-1];
            }
        }
        return profit;
    }
};
