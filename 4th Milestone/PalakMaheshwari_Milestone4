--------------------------Milestone 4-------------------------------
QUESTION 1  https://leetcode.com/problems/majority-element

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int> M;
        int n=nums.size();
        int ans =-1;
        for(int i=0;i<n;i++)
        {
            M[nums[i]]++;
            if(M[nums[i]]>n/2)
            {
                ans= nums[i];
            }
        }
        return ans;
    }
};

Runtime: 12 ms	Memory: 19.7 MB


---------------------------------------------------------------------------------------------------------------------

Question 2 https://leetcode.com/problems/non-overlapping-intervals


class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        int i = 1;
        int c = 0;
        while(i<intervals.size()){
            if(intervals[i][0]<intervals[i-1][1]){
                intervals[i][1] = min(intervals[i-1][1], intervals[i][1]);
                c++;
            }
            i++;
        }
        return c;
    }
};

Runtime: 424 ms	   Memory: 89.7 MB



---------------------------------------------------------------------------------------------------------------------

Question 3: https://leetcode.com/problems/kth-largest-element-in-an-array


class Solution {
public:
    int func(vector<int>& nums, int k, int m){ 
        int cnt = 0; 
        for(int i=0;i<nums.size();i++)
        { 
            if(nums[i]>m) cnt++; 
        } 
        return cnt+1; 
    }
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        int l=*min_element(nums.begin(),nums.end()),h=*max_element(nums.begin(), nums.end());
        while(l<=h){
            int m = l+(h-l)/2;
            int cnt = func(nums, k, m);
            if(cnt <= k){
                h = m-1;
            }
            else{
                l = m+1;
            }
        }
        return l;
    }
};


Runtime: 4 ms	   Memory: 9.8 MB


---------------------------------------------------------------------------------------------------------------------

Question 4: https://leetcode.com/problems/sort-an-array


class Solution {
public:
     vector<int> sortArray(vector<int>& nums) {
        merge_sort(nums, 0, nums.size());
        return nums;
    }

   private:
    static void merge_sort(vector<int>& nums, size_t l, size_t r) {
        assert(l <= r);

        const auto n = r - l;

        if (n < 2) {
            return;
        }

        const auto mid = l + (r - l) / 2;
        assert(mid - l < r - l);
        merge_sort(nums, l, mid);
        assert(r - mid < r - l);
        merge_sort(nums, mid, r);
        merge(nums, l, l + (r - l) / 2, r);
    }

    static void merge(vector<int>& nums, size_t l, size_t m, size_t r) {
        assert(l <= m && m <= r);

        vector<int> sorted(r - l);
        size_t l1 = l;
        size_t l2 = m;
        size_t r1 = m;
        size_t r2 = r;
        size_t ls = 0;
        while (l2 != r2) {
            if (l1 == r1) {
                copy(sorted.cbegin(), sorted.cbegin() + ls, nums.begin() + l);
                return;
            }

            if (nums[l1] < nums[l2]) {
                sorted[ls++] = nums[l1++];
            } else {
                sorted[ls++] = nums[l2++];
            }
        }
        copy(nums.cbegin() + l1, nums.cbegin() + r1, sorted.begin() + ls);
        copy(sorted.cbegin(), sorted.cend(), nums.begin() + l);
    }
};


Runtime: 144 ms	   Memory:	71.3 MB	  


---------------------------------------------------------------------------------------------------------------------

Question 5: https://leetcode.com/problems/hand-of-straights


class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        int n = hand.size();
        if(n%groupSize) return false;
        map<int,int>m;
        for(auto it: hand){
            m[it]++;
        }
        for(auto it: m){
            if(m[it.first]>0){
                for(int i = 1; i<groupSize; i++){
                    m[it.first+i] -= m[it.first];
                    if(m[it.first+i]<0){
                        return false;
                    }
                }
            }
        }
        return true;
    }
};

Runtime: 76 ms	Memory: 27.9 MB

---------------------------------------------------------------------------------------------------------------------

Question 6: https://leetcode.com/problems/string-without-aaa-or-bbb


class Solution {
public:
    string strWithout3a3b(int a, int b) {
         int A = 0, B = 0, n = a + b;
        string res;
        for (int i = 0; i < n; i++)
        {
            if (B == 2 || (A < 2 && a >= b))
                A++, B=0, a--, res.push_back('a');
            else
                A=0, B++, b--, res.push_back('b');
        }
        return res;
    }
};


Runtime: 0 ms	  Memory: 6 MB
