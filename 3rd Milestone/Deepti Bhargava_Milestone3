Q1. 

class Solution {
public:
    void reorderList(ListNode* head) {
        if((head==0)|| (head->next==0))
            return;
        
        ListNode* slow= head;
        ListNode* fast=slow->next;
        while(fast != 0 && fast->next !=0)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode*  preMiddle = slow;
        ListNode* preCurrent=slow->next;
        while(preCurrent->next != 0)
        {
            ListNode* current= preCurrent->next;
            preCurrent->next= current->next;
            current->next=preMiddle->next;
            preMiddle->next=current;
        }
        
        slow=head;
        fast=preMiddle->next;
        while(slow!=preMiddle)
        {
            preMiddle->next=fast->next;
            fast->next=slow->next;
            slow->next=fast;
            slow=fast->next;
            fast=preMiddle->next;
        }
    }
};

Q2.
class MinStack {   
public:
    stack<int> s;
    stack<int> mele;
    MinStack() {}
    void push(int val) 
    {
        s.push(val);
        if(!mele.empty() && val>=mele.top())
            mele.push(mele.top());
        else
            mele.push(val);
    }
    
    void pop() {
        s.pop();
        mele.pop();
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return mele.top() ;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

Q3.
class MyStack {
public:
    queue<int> q1;
    queue<int> q2;
    MyStack() {
        
    }
    
    void push(int x) {
        q2.push(x);
        while(!q1.empty())
        {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1,q2);
    }
    
    int pop() {
        int x=top();
        q1.pop();
        return x;
    }
    
    int top() {
        return q1.front();
    }
    
    bool empty() {
        return q1.empty();
    }
};

Q4.
class MyQueue {
public:
    stack<int> s1;
    stack<int> s2;
    MyQueue() { }
    
    void push(int x) {
        while(!s1.empty())
        {
            s2.push(s1.top());
            s1.pop();
        }
        s2.push(x);
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        int x= s1.top();
        s1.pop();
        return x;
    }
    
    int peek() {
        return s1.top();
    }
    
    bool empty() {
        return s1.empty();
    }
};

Q5.
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *l= new ListNode(0);
        ListNode *p=l;
        if(l1==null)
            return l2;
        if(l2==null)
            return l1;
        while(l1!= null|| l2!= null)
        {
            if(l1->val <= l2->val)
            {
                p->next=l1;
                l1=l1->next;
            }
            else{
                p->next=l2;
                l2=l2->next;
            }
            p=p->next;
        }
        if(l1!= null)
            p->next=l1;
        else
            p->next=l2;

        return l->next;
    }
};
Q6.
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode *s=head;
        ListNode *e=head;
        while(s && e && e->next)
        {
            s=s->next;
            e=e->next->next;
            if(e==s)
                return true;
        }
        return false;
    }
};
Q7.

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int prod=1;
        int ans=0, j=0;
        if(k<=1)
            return 0;
        for(int i=0;i<nums.size();i++)
        {
           prod *= nums[i];
            while(prod>=k)
                prod/=nums[j++];
            ans+=i-j+1;
        } 
        return ans;
    }
};
