1.	https://leetcode.com/problems/search-in-rotated-sorted-array 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int beg=0;
        int end=nums.size()-1;
        int mid;
        while(beg<=end)
        {
             mid=(beg+end)/2;
            if(target==nums[mid])
                return mid;
            else if(target>nums[mid])
            {
                if((nums[beg]>nums[mid])&&(nums[beg<=target]))
                    end=mid-1;
                else
                    beg=mid+1;
            } 
            else
            {
                if((nums[end]<nums[mid])&&(nums[end]>=target))
                    beg=mid+1;
                else
                    end=mid-1;
            }
        }
        return -1;
    }
};
2.	https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> pos;
        pos={-1,-1};
        for(int i=0;i<nums.size();i++)
        {
            if(target==nums[i])
            {
                pos.insert(pos.end(),i);
                pos.erase(pos.begin());
            }
        }
      return pos;
    }
};
3.	https://leetcode.com/problems/find-the-duplicate-number 

approach 1:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n,c=1;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    c++;
                    n=nums[j];                   
                    break;
                }
            }
        }
        if(c>1)
          return n;
        else
            return n;
    }
};

Approach 2:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=0;
       sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==nums[i+1])
            { n=nums[i];
               break;}
        }
        return n;
    }
};
4.	https://leetcode.com/problems/squares-of-a-sorted-array 
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
       for(int i=0;i<nums.size();i++)
       {
           nums[i]*=nums[i];
       }
       sort(nums.begin(),nums.end()); 
 return nums;
    }
};
5.	https://leetcode.com/problems/maximum-ice-cream-bars 

class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        int max_c=0;
        int c=-1;
        sort(costs.begin(),costs.end());
        for(int i=0;i<costs.size();i++)
        {
            if(max_c<=coins)
            {
                ++c;
                max_c=max_c+costs[i];
            }
        }
        return c;
    }
};
6.	https://leetcode.com/problems/longest-substring-without-repeating-characters 

class Solution {
public:
    
    int lengthOfLongestSubstring(string s) {
        int n=s.size();
        int res=0;
        for(int i=0;i<n;i++)
        {
            vector<bool> visited(256);
            for(int j=i;j<n;j++)
            {
                if(visited[s[j]]==true)
                    break;
                else
                {
                    res=max(res,j-i+1);
                    visited[s[j]]=true;
                }
            }
            visited[s[i]]=false;
        }
        return res;
    }
    
};

7.	https://leetcode.com/problems/longest-consecutive-sequence 
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> s;
        int l=0;
        for(int i=0;i<nums.size();i++)
        {
            s.insert(nums[i]);
        }
        for(int i=0;i<nums.size();i++)
        {
            if(s.find(nums[i]-1)==s.end())
            {
                int j=nums[i];
                while(s.find(j)!=s.end())
                    j++;
                l=max(l,j-nums[i]);
            }
        }
        return l;
    }
};
8.	https://leetcode.com/problems/majority-element 
approach 1:
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n;
        for(int i=0;i<nums.size();i++)
        {
            int me=1;
            for(int j=0;j<nums.size();j++)
            {if(nums[i]==nums[j])
                       me+=1;}
            {if(me>nums.size()/2)
             n=nums[i];}
        }
        return n;
    }
};
     
    Approach 2:
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n= nums.size()/2;
        return nums[n];
    }
};
